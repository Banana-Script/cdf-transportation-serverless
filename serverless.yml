service: cdf-call-serverless
frameworkVersion: "4"
useDotenv: true

plugins:
  - serverless-plugin-lambda-insights
  - serverless-offline-ssm
  - serverless-offline

custom:
  lambdaInsights:
    defaultLambdaInsights: true #enables Lambda Insights for all functions
  memorySize: 512
  serverless-offline-ssm:
    stages:
      - local
    #MODIFY FOR LOCAL DATABASE WORK
    ssm:
      "/dev/files-bucket": ${env:FILES_BUCKET, '594222377595-files'}
      "/dev/cognito-app-client": ${env:COGNITO_CLIENT_ID, '6jfq09ogf9elhip91fe5v23fgc'}
      "/dev/cognito-pool-name": ${env:COGNITO_POOL_NAME, 'capillasia-user-pool'}
      "/dev/user-pool": ${env:COGNITO_USER_POOL_ID, 'us-east-1_tgJtPRCtD'}
      "/dev/app-domain": ${env:APP_DOMAIN, 'https://dev-voiceaudit.capillasdelafe.com'}
      "/dev/db-host": ${env:DB_HOST, 'localhost'}
      "/dev/db-name": ${env:DB_NAME, 'capillasia'}
      "/dev/db-password": ${env:DB_PASSWORD, 'm3ZS4gLiJnTrl614'}
      "/dev/db-port": ${env:DB_PORT, '3306'}
      "/dev/db-user": ${env:DB_USERNAME, 'admincapillasia'}
      "/dev/lambda-deploy": "594222377595-lambda-deploy"
      "/dev/lambda-role": "arn:aws:iam::594222377595:role/capillasia-lambda"
      "/dev/lambda-sg": "sg-00e125d570085b639"
      "/dev/private-subnet-1": "subnet-04795f5c82593b4e5"
      "/dev/private-subnet-2": "subnet-09bdf2ec74d73d844"
      "/dev/region": ${env:REGION, 'us-east-1'}
      "/dev/params-env": ${env:PARAMS_ENV, 'undefined'}
      "/dev/twilio_account_sid": ${env:TWILIO_ACCOUNT_SID, 'undefined'}
      "/dev/twilio_auth_token": ${env:TWILIO_AUTH_TOKEN, 'undefined'}
      "/dev/twilio_phone_number": ${env:TWILIO_PHONE_NUMBER, 'undefined'}
      "/dev/twilio_sms_number": ${env:TWILIO_SMS_NUMBER, 'undefined'}
  serverless-offline:
    useChildProcesses: true
  secrets:
    db_name: ${ssm:/${env:PARAMS_ENV}/db-name}
    db_user: ${ssm:/${env:PARAMS_ENV}/db-user}
    db_password: ${ssm:/${env:PARAMS_ENV}/db-password}
    db_host: ${ssm:/${env:PARAMS_ENV}/db-host}
    db_port: 3306
    region: ${ssm:/${env:PARAMS_ENV}/region}
    cognito_user_pool_id: ${ssm:/${env:PARAMS_ENV}/user-pool}
    cognito_client_id: ${ssm:/${env:PARAMS_ENV}/cognito-app-client}
    cognito_user_pool_name: ${ssm:/${env:PARAMS_ENV}/cognito-pool-name}
    files_bucket: ${ssm:/${env:PARAMS_ENV}/files-bucket}
    app_domain: ${ssm:/${env:PARAMS_ENV}/app-domain}
    env: ${ssm:/${env:PARAMS_ENV}/params-env}
    twilio_account_sid: ${ssm:/${env:PARAMS_ENV}/twilio_account_sid}
    twilio_auth_token: ${ssm:/${env:PARAMS_ENV}/twilio_auth_token}
    twilio_phone_number: ${ssm:/${env:PARAMS_ENV}/twilio_phone_number}
    twilio_sms_number: ${ssm:/${env:PARAMS_ENV}/twilio_sms_number}

provider:
  name: aws
  stage: ${opt:stage,'local'} # default to 'local'
  timeout: 30 # optional, in seconds, default is 6
  versionFunctions: false
  region: us-east-1
  # apiGateway:
  #   restApiId: ${ssm:/${env:PARAMS_ENV}/api-gateway-id}
  #   restApiRootResourceId: ${ssm:/${env:PARAMS_ENV}/api-gateway-root-id}
  runtime: nodejs22.x
  deploymentBucket:
    name: ${ssm:/${env:PARAMS_ENV}/lambda-deploy}
  iam:
    role: ${ssm:/${env:PARAMS_ENV}/lambda-role}
    roleStatements:
      - Effect: Allow
        Action:
          - kms:Decrypt
        Resource: "*"
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
        Resource: "*"
  vpc:
    securityGroupIds:
      - ${ssm:/${env:PARAMS_ENV}/lambda-sg}
    subnetIds:
      - ${ssm:/${env:PARAMS_ENV}/private-subnet-1}
      - ${ssm:/${env:PARAMS_ENV}/private-subnet-2}
  environment:
    DB_DIALECT: "mysql"
    DB_NAME: ${self:custom.secrets.db_name}
    DB_USERNAME: ${self:custom.secrets.db_user}
    DB_PASSWORD: ${self:custom.secrets.db_password}
    DB_HOST: ${self:custom.secrets.db_host}
    DB_PORT: ${self:custom.secrets.db_port}
    REGION: ${self:custom.secrets.region}
    COGNITO_USER_POOL_ID: ${self:custom.secrets.cognito_user_pool_id}
    COGNITO_CLIENT_ID: ${self:custom.secrets.cognito_client_id}
    COGNITO_POOL_NAME: ${self:custom.secrets.cognito_user_pool_name}
    FILES_BUCKET: ${self:custom.secrets.files_bucket}
    APP_DOMAIN: ${self:custom.secrets.app_domain}
    ENV: ${self:custom.secrets.env}
    TWILIO_ACCOUNT_SID: ${self:custom.secrets.twilio_account_sid}
    TWILIO_AUTH_TOKEN: ${self:custom.secrets.twilio_auth_token}
    TWILIO_PHONE_NUMBER: ${self:custom.secrets.twilio_phone_number}
    TWILIO_SMS_NUMBER: ${self:custom.secrets.twilio_sms_number}
package:
  individually: true
  patterns:
    - "!./**"
functions:
  #nest build vapi-consumptions-sync && serverless invoke local -f vapi-consumptions-sync -p ./apps/vapi-consumptions-sync/event.json
  vapi-consumptions-sync:
    handler: dist/apps/vapi-consumptions-sync/main.handler
    package:
      patterns:
        - dist/apps/vapi-consumptions-sync/**

  #nest build cognito-messages && serverless invoke local -f cognito-messages -p ./apps/cognito-messages/event.json
  cognito-messages:
    handler: dist/apps/cognito-messages/main.handler
    package:
      patterns:
        - dist/apps/cognito-messages/**

  #nest build custom-sms-sender && serverless invoke local -f custom-sms-sender -p ./apps/custom-sms-sender/event.json
  custom-sms-sender:
    handler: dist/apps/custom-sms-sender/main.handler
    package:
      patterns:
        - dist/apps/custom-sms-sender/**

resources:
  Resources:
    CognitoSMSKmsKey:
      Type: AWS::KMS::Key
      Properties:
        Description: "KMS key for Cognito Custom SMS Sender encryption"
        KeyPolicy:
          Statement:
            - Sid: Enable IAM User Permissions
              Effect: Allow
              Principal:
                AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
              Action: "kms:*"
              Resource: "*"
            - Sid: Allow Cognito Service
              Effect: Allow
              Principal:
                Service: cognito-idp.amazonaws.com
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: "*"
            - Sid: Allow Lambda Function
              Effect: Allow
              Principal:
                AWS: !GetAtt IamRoleLambdaExecution.Arn
              Action:
                - kms:Decrypt
                - kms:DescribeKey
              Resource: "*"
    
    CognitoSMSKmsKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/cognito-sms-sender-key
        TargetKeyId: !Ref CognitoSMSKmsKey

  Outputs:
    CognitoSMSKmsKeyId:
      Description: "KMS Key ID for Cognito SMS Sender"
      Value: !Ref CognitoSMSKmsKey
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoSMSKmsKeyId
    
    CognitoSMSKmsKeyArn:
      Description: "KMS Key ARN for Cognito SMS Sender"
      Value: !GetAtt CognitoSMSKmsKey.Arn
      Export:
        Name: ${self:service}-${self:provider.stage}-CognitoSMSKmsKeyArn
